#lang typed/racket

(provide (all-defined-out))

(module+ test (require typed/rackunit))

(: line-merge (-> String Natural String Natural String))
(define (line-merge l1 end-col l2 start-col)
  ;(displayln (~e line-merge l1 end-col l2 start-col))
  (define str1 l1)
  (define str2 l2)
  (string-append (substring str1 0 end-col)
                 (if (< start-col (string-length l2))
                     (substring str2 start-col)
                     "")))

;;; l1 over l2
(: split-three-at : (All (T) (Listof T) Natural -> (Values (Listof T) (Listof T) (Listof T))))
(define (split-three-at lst pos)
  (when (> pos (length lst)) (error 'split-three-at-out-of-bound (~a "index" pos " > length" (length lst))))
  (define-values (l0 l12) (split-at lst pos))
  (define-values (l1 l2) (if (empty? l12) (values '() '()) (split-at l12 1)))
  (values l0 l1 l2))
  
(module+ test
  (let-values ([(l0 l1 l2) (split-three-at (list "abc") 0)])
    (check-equal? l0 '())
    (check-equal? l1 '("abc"))
    (check-equal? l2 '()))
  (let-values ([(l0 l1 l2) (split-three-at (list "abc") 1)])
    (check-equal? l0 '("abc"))
    (check-equal? l1 '())
    (check-equal? l2 '()))
  ;(check-exn exn:fail? (lambda () (split-three-at (list "abc") 2)))
  (let-values ([(l0 l1 l2) (split-three-at (list "abc") 0)])
    (check-equal? l0 '())
    (check-equal? l1 '("abc"))
    (check-equal? l2 '()))
  (let-values ([(l0 l1 l2) (split-three-at (list "abc" "") 1)])
    (check-equal? l0 '("abc"))
    (check-equal? l1 '(""))
    (check-equal? l2 '()))
  (let-values ([(l0 l1 l2) (split-three-at (list "abc" "") 2)])
    (check-equal? l0 '("abc" ""))
    (check-equal? l1 '())
    (check-equal? l2 '()))
  (let-values ([(l0 l1 l2) (split-three-at (list "abc" "def" "ghi") 2)])
    (check-equal? l0 '("abc" "def"))
    (check-equal? l1 '("ghi"))
    (check-equal? l2 '())))

(: before-this-after (-> (Listof Any) Natural (Values (Listof Any) Any (Listof Any))))
(define (before-this-after lst pos)
  (define-values (l0 l1 l2) (split-three-at lst pos))
  (define l1-elem (if (empty? l1) "" (first l1)))
  (values l0 l1-elem l2))

(module+ test
  (let-values ([(l0 l1 l2) (before-this-after (list "abc" "def") 0)])
    (check-equal? l0 '())
    (check-equal? l1 "abc")
    (check-equal? l2 '("def")))
  (let-values ([(l0 l1 l2) (before-this-after (list "abc" "def") 1)])
    (check-equal? l0 '("abc"))
    (check-equal? l1 "def")
    (check-equal? l2 '()))
  (let-values ([(l0 l1 l2) (before-this-after (list "abc" "def") 2)])
    (check-equal? l0 '("abc" "def"))
    (check-equal? l1 "")
    (check-equal? l2 '())))

(: first-middle-last : (All (T) (Listof T) -> (Values T (Listof T) T)))
(define (first-middle-last lst)
  (when (< (length lst) 2) (error 'first-middle-last-length-too-small (~a "length = " (length lst))))
  (define f (first lst))
  (define l (last lst))
  (define middle (drop-right (drop lst 1) 1))
  (values f middle l))

(module+ test
  ;(check-exn exn:fail? (lambda () (first-middle-last (list "abc"))))
  (let-values ([(l0 l1 l2) (first-middle-last (list "abc" "def"))])
    (check-equal? l0 "abc")
    (check-equal? l1 '())
    (check-equal? l2 "def"))
  (let-values ([(l0 l1 l2) (first-middle-last (list "abc" "def" "ghi"))])
    (check-equal? l0 "abc")
    (check-equal? l1 '("def"))
    (check-equal? l2 "ghi")))

;;; l1 = l3 > l0 = l4 > l2
;;; l1 l3 values = list-ref pos1/pos2
;;; if pos1 = pos2, then l3 = l1
(: split-five-at : (All (T) (Listof T) Natural Natural -> (Values (Listof T) (Listof T) (Listof T) (Listof T) (Listof T))))
(define (split-five-at lst pos1 pos2)
  (when (> pos1 pos2) (error 'split-five-at-incorrect-params (~a "pos1=" pos1 " > pos2 = " pos2)))
  (when (> pos2 (length lst)) (error 'split-five-at-out-of-bound (~a "index" pos2 " > length" (length lst))))
  (define-values (l0 l1 l234) (split-three-at lst pos1))
  (cond
    [(= pos1 pos2) (values l0 l1 '() l1 l234)]
    [else
     (define pos (cast (- pos2 pos1 1) Natural))
     (define-values (l2 l3 l4) (split-three-at l234 pos))
     (values l0 l1 l2 l3 l4)]))

(module+ test
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def") 0 1)])
    (check-equal? l0 '())
    (check-equal? l1 '("abc"))
    (check-equal? l2 '())
    (check-equal? l3 '("def"))
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def") 0 2)])
    (check-equal? l0 '())
    (check-equal? l1 '("abc"))
    (check-equal? l2 '("def"))
    (check-equal? l3 '())
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def") 1 2)])
    (check-equal? l0 '("abc"))
    (check-equal? l1 '("def"))
    (check-equal? l2 '())
    (check-equal? l3 '())
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def" "ghi") 0 2)])
    (check-equal? l0 '())
    (check-equal? l1 '("abc"))
    (check-equal? l2 '("def"))
    (check-equal? l3 '("ghi"))
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def" "ghi") 1 2)])
    (check-equal? l0 '("abc"))
    (check-equal? l1 '("def"))
    (check-equal? l2 '())
    (check-equal? l3 '("ghi"))
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "abc" "def" "ghi") 2 3)])
    (check-equal? l0 '("abc" "def"))
    (check-equal? l1 '("ghi"))
    (check-equal? l2 '())
    (check-equal? l3 '())
    (check-equal? l4 '()))
  (let-values ([(l0 l1 l2 l3 l4) (split-five-at (list "a" "b" "c" "d" "e" "f" "g" "h" "i") 3 7)])
    (check-equal? l0 '("a" "b" "c"))
    (check-equal? l1 '("d"))
    (check-equal? l2 '("e" "f" "g"))
    (check-equal? l3 '("h"))
    (check-equal? l4 '("i"))))


(: first-or-empty-string (-> (Listof String) String))
(define (first-or-empty-string lst)
  (if (empty? lst)
      ""
      (first lst)))

(: substring-in-range (->* (String Natural) (Natural) String))
(define (substring-in-range str start [end +inf.0])
  (define len (string-length str))
  (cond
    [(> start len) ""]
    [else
     (substring str start (exact-round (min end len)))]))

(: before-middle-after (All (T) (Listof T) Natural Natural -> (Values (Listof T) (Listof T) (Listof T))))
(define (before-middle-after lst pos1 pos2)
  (define-values (l12 l3) (split-at lst pos2))
  (define-values (l1 l2) (split-at l12 pos1))
  (values l1 l2 l3)
  )
